#!/bin/bash

source ../../handleErrors

PKG_DIR="/src/pkg"
PKG_BASIC_DIR="${PKG_DIR}/basic"
PKG_STD_DIR="${PKG_DIR}/standard"
BUILD_DIR="/src/build"
SCRIPT_DIR="/src/scripts/build"

# Extracts source code for the selected package.
extractPkg() {
    if [ "$(echo ${2} | grep "BASIC")" ]
    then
        EXTRACT_DIR="${PKG_BASIC_DIR}"
    elif [ "$(echo ${2} | grep "STD")" ]
    then
        EXTRACT_DIR="${PKG_STD_DIR}"
    fi
    
    # Extract the primary source archive to a new directory.
    if [ "$(echo ${1} | grep \\.zip\$)" ]
    then
        displayMsg OK "... Extracting source code"
        unzip "${EXTRACT_DIR}/${1}" -d "${EXTRACT_DIR}"
    elif [ "$(isArchive ${1})" ]
    then
        displayMsg OK "... Extracting source code"
        tar xf "${EXTRACT_DIR}/${1}" -C "${EXTRACT_DIR}"
    else
            displayMsg ERR "... Unknown source format. Not extracting '${1}'"
    fi
}

# Checks if a filename is an archive that can be extracted.
isArchive() {
  for ext in \\.zip \\.tar\\.bz2 \\.tar\\.gz \\.tar\\.xz \\.tgz \\.tar; do
    if [ "$(echo ${1} | grep ${ext}\$)" ]; then
      echo "true"
      return
    fi
  done
}

BUILD() {
    # Load build script
    local SCRIPT_SRC="${SCRIPT_DIR}/${1}"

    displayMsg OK "... Selected '${1}' package"
    
    # Extract the source code
    extractPkg "$(cat ${SCRIPT_SRC} | grep '\FILENAME' | cut -d '=' -f2 | sed -e 's/^"//' -e 's/"$//')" "${2}"
    
    displayMsg OK "... Building a temporary version of this software"
    # Change directory to builds folder
    cd "${BUILD_DIR}"
    
    # Create dedicated directory for the package
    mkdir -p ${1}
    # Move inside the dedicated directory
    cd ${1}
    # Execute the script
    bash /${SCRIPT_SRC}
}

cleanupBuild() {
    displayMsg OK "Cleaning up chroot env..."
    cd /src/build
    rm -R -- */
    cd /src/pkg/basic
    rm -R -- */
    displayMsg OK "Done ..."
}

# Intel Microcode for the CPU
BUILD microcode STD

# Bash Shell startup files
cat > /etc/profile << "EOF"
# Begin /etc/profile
# System wide environment variables and startup programs.

# System wide aliases and functions should go in /etc/bashrc.  Personal
# environment variables and startup programs should go into
# ~/.bash_profile.  Personal aliases and functions should go into
# ~/.bashrc.

# Functions to help us manage paths.  Second argument is the name of the
# path variable to be modified (default: PATH)
pathremove () {
        local IFS=':'
        local NEWPATH
        local DIR
        local PATHVARIABLE=${2:-PATH}
        for DIR in ${!PATHVARIABLE} ; do
                if [ "$DIR" != "$1" ] ; then
                  NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
                fi
        done
        export $PATHVARIABLE="$NEWPATH"
}

pathprepend () {
        pathremove $1 $2
        local PATHVARIABLE=${2:-PATH}
        export $PATHVARIABLE="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}

pathappend () {
        pathremove $1 $2
        local PATHVARIABLE=${2:-PATH}
        export $PATHVARIABLE="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
}

export -f pathremove pathprepend pathappend

# Set the initial path
export PATH=/bin:/usr/bin

if [ $EUID -eq 0 ] ; then
        pathappend /sbin:/usr/sbin
        unset HISTFILE
fi

# Setup some environment variables.
export HISTSIZE=1000
export HISTIGNORE="&:[bf]g:exit"

# Set some defaults for graphical systems
export XDG_DATA_DIRS=/usr/share/
export XDG_CONFIG_DIRS=/etc/xdg/

# Setup a red prompt for root and a green one for users.
NORMAL="\[\e[0m\]"
RED="\[\e[1;31m\]"
GREEN="\[\e[1;32m\]"
if [[ $EUID == 0 ]] ; then
  PS1="$RED\u [$NORMAL\w$RED]# $NORMAL"
else
  PS1="$GREEN\u [$NORMAL\w$GREEN]\$ $NORMAL"
fi

for script in /etc/profile.d/*.sh ; do
        if [ -r $script ] ; then
                . $script
        fi
done

unset script RED GREEN NORMAL

# End /etc/profile
EOF

# Create the /etc/profile.d directory, where the individual
# initialization scripts are placed
install --directory --mode=0755 --owner=root --group=root /etc/profile.d

# The following script uses the ~/.dircolors and /etc/dircolors
# files to control the colors of file names in a directory listing.
# They control colorized output of things like ls --color
cat > /etc/profile.d/dircolors.sh << "EOF"
# Setup for /bin/ls and /bin/grep to support color, the alias is in /etc/bashrc.
if [ -f "/etc/dircolors" ] ; then
        eval $(dircolors -b /etc/dircolors)
fi

if [ -f "$HOME/.dircolors" ] ; then
        eval $(dircolors -b $HOME/.dircolors)
fi

alias ls='ls --color=auto'
alias grep='grep --color=auto'
EOF

# The following script adds some useful paths to the PATH and can be
# used to customize other PATH related environment variables
# (e.g. LD_LIBRARY_PATH, etc) that may be needed for all users.
cat > /etc/profile.d/extrapaths.sh << "EOF"
if [ -d /usr/local/lib/pkgconfig ] ; then
        pathappend /usr/local/lib/pkgconfig PKG_CONFIG_PATH
fi
if [ -d /usr/local/bin ]; then
        pathprepend /usr/local/bin
fi
if [ -d /usr/local/sbin -a $EUID -eq 0 ]; then
        pathprepend /usr/local/sbin
fi

# Set some defaults before other applications add to these paths.
pathappend /usr/share/man  MANPATH
pathappend /usr/share/info INFOPATH
EOF

# The following script sets up the default inputrc configuration file.
# If the user does not have individual settings, it uses the global file.
cat > /etc/profile.d/readline.sh << "EOF"
# Setup the INPUTRC environment variable.
if [ -z "$INPUTRC" -a ! -f "$HOME/.inputrc" ] ; then
        INPUTRC=/etc/inputrc
fi
export INPUTRC
EOF

# Setting the umask value is important for security. Here the default
# group write permissions are turned off for system users and when the
# user name and group name are not the same.
cat > /etc/profile.d/umask.sh << "EOF"
# By default, the umask should be set.
if [ "$(id -gn)" = "$(id -un)" -a $EUID -gt 99 ] ; then
  umask 002
else
  umask 022
fi
EOF

# Base /etc/bashrc
cat > /etc/bashrc << "EOF"
# Begin /etc/bashrc
# System wide aliases and functions.

# System wide environment variables and startup programs should go into
# /etc/profile.  Personal environment variables and startup programs
# should go into ~/.bash_profile.  Personal aliases and functions should
# go into ~/.bashrc

# Provides colored /bin/ls and /bin/grep commands.  Used in conjunction
# with code in /etc/profile.

alias ls='ls --color=auto'
alias grep='grep --color=auto'

# Provides prompt for non-login shells, specifically shells started
# in the X environment.

NORMAL="\[\e[0m\]"
RED="\[\e[1;31m\]"
GREEN="\[\e[1;32m\]"
if [[ $EUID == 0 ]] ; then
  PS1="$RED\u [$NORMAL\w$RED]# $NORMAL"
else
  PS1="$GREEN\u [$NORMAL\w$GREEN]\$ $NORMAL"
fi

unset RED GREEN NORMAL

# End /etc/bashrc
EOF

# Base ~/.bash_profile
cat > ~/.bash_profile << "EOF"
# Begin ~/.bash_profile
# Personal environment variables and startup programs.

# Personal aliases and functions should go in ~/.bashrc.  System wide
# environment variables and startup programs are in /etc/profile.
# System wide aliases and functions are in /etc/bashrc.

if [ -f "$HOME/.bashrc" ] ; then
  source $HOME/.bashrc
fi

if [ -d "$HOME/bin" ] ; then
  pathprepend $HOME/bin
fi

# End ~/.bash_profile
EOF

# Base ~/.bashrc
cat > ~/.bashrc << "EOF"
# Begin ~/.bashrc
# Personal aliases and functions.

# Personal environment variables and startup programs should go in
# ~/.bash_profile.  System wide environment variables and startup
# programs are in /etc/profile.  System wide aliases and functions are
# in /etc/bashrc.

if [ -f "/etc/bashrc" ] ; then
  source /etc/bashrc
fi

# End ~/.bashrc
EOF

# Base ~/.bash_logout
cat > ~/.bash_logout << "EOF"
# Begin ~/.bash_logout
# Personal items to perform on logout.

# End ~/.bash_logout
EOF

# Use the dircolors capability
dircolors -p > /etc/dircolors

# Base /etc/issue
cat > /etc/issue << "EOF"
# Begin /etc/issue
__________                    .___        .____    .__                     
\______   \_____    ____    __| _/____    |    |   |__| ____  __ _____  ___
 |     ___/\__  \  /    \  / __ |\__  \   |    |   |  |/    \|  |  \  \/  /
 |    |     / __ \|   |  \/ /_/ | / __ \_ |    |___|  |   |  \  |  />    < 
 |____|    (____  /___|  /\____ |(____  / |_______ \__|___|  /____//__/\_ \
                \/     \/      \/     \/          \/       \/            \/
# End /etc/issue
EOF

# Install Packages
BUILD random-number-gen STD
BUILD lsb-release STD
BUILD cracklib STD
BUILD haveged STD
BUILD iptables STD